str(x)
y <- rnorm(1000)
hist(y)
hist(y/1000)
table(y)
density(y)
d <- density(y)
plot(d, main="Probability distribution")
ppois(16, lambda=12)
ln2
log(2)
if (!require(remotes)) { install.packages("remotes") }
remotes::install_github("fbreitwieser/pavian")
5-4-3-2-1
5-4-2
test <- c(1,2,2,3,1,3)
sd(test)
sd(test)/dim(test)
nrows(test)
nrow(test)
sd(test)/sqrt(length(x))
getwd()
install.packages("vegan")
?wil
?wilcox.test
install.packages("devtools")
library(devtools)
install_github("hallucigenia-sparsa/seqgroup",build_vignettes = TRUE)
getwd()
#library(devtools)
#install_github("hallucigenia-sparsa/seqgroup")
require('seqgroup')
getwd()
?barebones
require("seqgroupo")
require("seqgroup")
install.packages("seqgroup")
install.packages("devtools")
library(devtools)
install_github("hallucigenia-sparsa/seqgroup")
library(devtools)
install_github("hallucigenia-sparsa/seqgroup")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DirichletMultinomial")
require("phyloseq")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(devtools)
install_github("hallucigenia-sparsa/seqgroup")
install.packages("vegan")
install_github("hallucigenia-sparsa/seqgroup")
install_github("hallucigenia-sparsa/seqgroup")
p.adjust
test <- c(0.01, 0.04, 0.001)
p.adjust(test, method='BH')
corrected <-p.adjust(test, method='BH')
rank <- c(2, 1, 3)
rank / 3
rank / 3 * 0.05
test * 3 / rank
test * 3
test * 3 / rank
corrected
test <- c(0.01, 0.04, 0.001)
corrected <-p.adjust(test, method='BH')
rank <- c(2, 3, 1)
rank / 3 * 0.05
corr2 <- test * 3 / rank
corr2
rank(test)
test <- c(0.01, 0.04, 0.001, 2, 3, 1)
test <- c(0.01, 0.04, 0.001, 0.04, 0.002, 0.05, 0.1)
corrected <-p.adjust(test, method='BH')
rank <- rank(test)
corr2 <- test * 3 / rank
corr2
corrected
corr2 <- test * length(test) / rank
corr2
corrected
test <- c(0.01, 0.04, 0.001, 0.03, 0.002, 0.05, 0.1)
corrected <-p.adjust(test, method='BH')
rank <- rank(test)
corr2 <- test * length(test) / rank
corr2
corrected
log(0.1)
log(0.01)
log(0.9)
test <- c(0.01, 0.04, 0.001, 0.03, 0.002, 0.05, 0.1)
test2 <- c(0.1, 0.4, -0.1, -0.5, -0.3, -0.3, -0.4)
df <- data.frame(test, test2)
cor(df)
seq(1,3)
sample(seq(1, nrow(df)))
sample(seq(1, nrow(df)), replace = T)
corrs <- c()
for (i in seq(1, 1000)) {
temp <- sample(seq(1, nrow(df)), replace = T)
temp_df <- df[temp, ]
corr <- cor(temp_df[, 1], temp_df[, 2])
corrs <- c(corrs, corr)
}
corrs
length(corrs)
corrs >= cor
cor
corrs >= cor(df)
corrs >= cor(df$test, df$test2)
corrs <= cor(df$test, df$test2)
abs(corrs) >= abs(cor(df$test, df$test2))
corrs
hist(corrs)
?t.test
t.test(corrs, mu=0, alternative = "two.sided")
sd(corrs)
t.test(corrs, mu=0, alternative = "two.sided")
corr(x)
cor(df)
temp_df
corrs <- c()
for (i in seq(1, 100)) {
temp <- sample(seq(1, nrow(df)), replace = T)
temp_df <- df[temp, ]
corr <- cor(temp_df[, 1], temp_df[, 2])
corrs <- c(corrs, corr)
}
t.test(corrs, mu=0, alternative = "two.sided")
for (i in seq(1, 100)) {
temp <- sample(seq(1, nrow(df)), replace = T)
temp_df <- df[temp, ]
corr <- cor(temp_df[, 1], temp_df[, 2])
corrs <- c(corrs, corr)
}
percentile(corr)
summary(corrs)
temp
corrs <- c()
for (i in seq(1, 100)) {
temp <- sample(seq(1, nrow(df)), replace = T)
temp_df <- df[temp, ]
corr <- cor(temp_df[, 1], temp_df[, 2])
corrs <- c(corrs, corr)
}
t.test(corrs, mu=0, alternative = "two.sided")
test <- c(0.01, 0.04, 0.001, 0.03, 0.002, 0.05, 0.1)
test2 <- c(0.1, 0.4, -0.1, -0.5, -0.3, -0.3, -0.4)
df <- data.frame(test, test2)
corrs <- c()
for (i in seq(1, 100)) {
temp <- sample(seq(1, nrow(df)), replace = T)
temp_df <- df[temp, ]
corr <- cor(temp_df[, 1], temp_df[, 2])
corrs <- c(corrs, corr)
}
t.test(corrs, mu=0, alternative = "two.sided")
test <- c(0.01, 0.04, 0.001, 0.03, 0.002, 0.05, 0.1)
test2 <- c(0.1, 0.4, -0.1, -0.5, -0.3, -0.3, -0.4)
df <- data.frame(test, test2)
corrs <- c()
for (i in seq(1, 1000)) {
temp <- sample(seq(1, nrow(df)), replace = T)
temp_df <- df[temp, ]
corr <- cor(temp_df[, 1], temp_df[, 2])
corrs <- c(corrs, corr)
}
t.test(corrs, mu=0, alternative = "two.sided")
boot(df, cor, 1000)
install.packages("boot",dep=TRUE)
library(boot)
install.packages("boot",dep=TRUE)
boot(df, cor, 1000)
boot(data = df, corr, 1000)
corr <- function(d, i){
d2 <- d[i,]
return(cor(d2$write, d2$math))
}
boot(data = df, corr, 1000)
boot(data = matrix(df), corr, 1000)
corr <- function(d, i){
d2 <- d[i,]
return(cor(d2$test, d2$test2))
}
boot(data = df, corr, 1000)
boots <- boot(data = df, corr, 1000)
mean(boots$t) - boot$0
mean(boots$t) - boots$0
mean(boots$t) - boots$t0
boots$t0
boots$t
sd(boots$t)
boots
hist(boots)
hist(boots$t)
summary(boots)
summary(boots$t)
boot.ci(boot.out = boots, type = c("norm"))
mean(boots$t)
sd(boost$t)
sd(boots$t)
sd(corrs)
mean(corrs)
mean(corrs)/(0.3783149/sqrt(length(corrs)))
confint(corrs)
quantile(corrs)
mean(abs(boots$t0) < abs(boots$t-mean(boots$t)))
abs(boots$t-mean(boots$t)))
abs(boots$t-mean(boots$t)))
abs(boots$t-mean(boots$t))
mean(abs(boots$t-mean(boots$t)) >= 0)
quantile(corrs, c(0.025, 0.975))
setwd(~/Downloads)
getwd()
require(Biostrings)
dna <- readDNAStringSet("sequence.fasta")
require(Biostrings)
require(seqtool)
dna <- readDNAStringSet("sequence.fasta")
require(Biostrings)
install.packages('Xvector')
install.packages('Biostrings')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
require(Biostrings)
dna <- readDNAStringSet("sequence.fasta")
dna
mono <- oligonucleotideFrequency(dna,
width = 4,
step = 4,
as.prob = T,
with.labels = T)
mono
mono <- oligonucleotideFrequency(dna,
width = 4,
step = 4,
as.prob = F,
with.labels = T)
mono['TTTT']
mono
names(mono)
colnames(mono)
mono$AAAA
mono$'AAAA'
data.frame(mono)
str(mono)
mono["TTTT"]
mono["AAAA"]
test <- data.frame(mono)
dim(test)
test <- list(mono)
test
names(test)
test['AAAA']
mono
require(Biostrings)
dna <- readDNAStringSet("sequence.fasta")
mono <- oligonucleotideFrequency(dna,
width = 5,
step = 5,
as.prob = F,
with.labels = T)
mono
View(df)
View(mono)
log((10000 * ((1 - 0.0001) / 0.0001)), base=20)
log((200 * ((1 - 0.0001) / 0.0001)), base=20)
7/15
x <- c('Morganella', 'Blautia', 'Raoultella', 'Cellulosimicrobium',
'Campylobacter', 'Alloprevotella', 'Megasphaera', 'Bacteroides',
'Shewanella', 'Salmonella', 'Citrobacter', 'Cellulomonas',
'Stenotrophomonas', 'Oerskovia', 'Enterobacter', 'Cupriavidus',
'Rhodococcus', 'Clostridioides', 'Klebsiella', 'Pandoraea',
'Cronobacter')
y <- c('Bacillus', 'Burkholderia', 'Enterococcus', 'Aeromonas', 'Cronobacter',
'Cytomegalovirus', 'Lymphocryptovirus', 'Campylobacter', 'Pantoea',
'Shigella', 'Klebsiella', 'Cellulomonas', 'Salmonella', 'Shewanella',
'Megasphaera', 'Stenotrophomonas', 'Agrobacterium', 'Oerskovia',
'Prevotella', 'Escherichia', 'Blautia', 'Bacteroides', 'Enterobacter',
'Alphatorquevirus', 'Veillonella')
intersection(x, y)
intersect(x, y)
length(intersect(x, y))
setwd("../Desktop/sepsis_mnt/Polymicrobial-Signature-of-Sepsis/datasets")
maxi <- read.csv("kapusta_order_raw_maxi.csv", stringsAsFactors = F)
silva <- read.csv("kapusta_order_raw_silva.csv", stringsAsFactors = F)
common_cols <- intersect(colnames(maxi), colnames(silva))
common_cols <- common_cols[common_cols != "y"]
y <- as.character(maxi[, "y"])
y[y == "healthy"] <- "Healthy"
y[y == "septic"] <- "Septic"
y[y == "ntc"] <- "NTC"
maxi <- maxi[, 2:ncol(maxi)]
maxi <- maxi[, common_cols]
maxi <- maxi / apply(maxi, 1, sum) * 100
maxi <- aggregate(maxi, by=list(y), mean)
silva <- silva[, 2:ncol(silva)]
silva <- silva[, common_cols]
silva <- silva / apply(silva, 1, sum) * 100
silva <- aggregate(silva, by=list(y), mean)
require(ggplot2)
require(reshape2)
require(RColorBrewer)
pal <- brewer.pal(8, "Set2")
# Maxikraken db
melted_maxi <- melt(maxi)
# Get most abundant orders
means <- aggregate(melted_maxi$value, by=list(melted_maxi$variable), mean)
orders <- as.character(means$Group.1)[order(means$x, decreasing = T)][1:8]
melted_maxi <- melt(maxi[, colnames(maxi) %in% c("Group.1", orders)])
melted_silva <- melt(silva[, colnames(silva) %in% c("Group.1", orders)])
# Set factor sequence
melted_maxi$variable <- factor(melted_maxi$variable, levels = orders)
melted_silva$variable <- factor(melted_silva$variable, levels = orders)
plt1 <- ggplot(melted_maxi, aes(y = value, x=Group.1, fill=variable)) +
geom_bar(stat="identity") +
labs(fill = "Order", x = "MaxiKraken2", y = "Mean Relative Abundance (%)") +
scale_fill_manual(values = pal)
plt2 <- ggplot(melted_silva, aes(y = value, x=Group.1, fill=variable)) +
geom_bar(stat="identity") +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(fill = "Order", x = "Silva") +
scale_fill_manual(values = pal)
# Plot no. of minimisers in database
silva <- read.csv("silva_290620_info.txt", sep = "\t", stringsAsFactors = F, header = F)
maxi <- read.csv("maxikraken2_info.txt", sep = "\t", stringsAsFactors = F, header = F)
# Trim whitespace
silva$V6 <- trimws(silva$V6)
maxi$V6 <- trimws(maxi$V6)
# Get orders
silva_df <- silva[silva$V6 %in% orders, c("V1", "V6")]
silva_df$Database <- "Silva"
maxi_df <- maxi[maxi$V6 %in% orders, c("V1", "V6")]
maxi_df$Database <- "MaxiKraken2"
plot_df <- rbind(silva_df, maxi_df)
plot_df$V6 <- factor(plot_df$V6, levels = orders)
plt3 <- ggplot(plot_df, aes(y = V1, x = Database, fill = V6)) +
geom_bar(stat="identity") +
labs(fill = "Order", x = "Database", y = "Proportion of minimisers (%)") +
scale_fill_manual(values = pal)
require(ggpubr)
ggarrange(plt1, plt2, plt3,
ncol = 2, nrow = 2,
common.legend = T,
align = "hv",
labels = "auto")
ggsave("../results/silva_versus_maxi_barplot.png", dpi = 600, width = 8, height = 5)
ggarrange(plt1, plt2, plt3,
ncol = 2, nrow = 2,
common.legend = T,
align = "hv",
labels = "auto",
label.x = 1)
ggsave("../results/silva_versus_maxi_barplot.png", dpi = 600, width = 8, height = 5)
ggarrange(plt1, plt2, plt3,
ncol = 2, nrow = 2,
common.legend = T,
align = "hv",
labels = "auto")
rm(list = ls())
setwd("~/git_repos/Polymicrobial-Signature-of-Sepsis/datasets")
maxi <- read.csv("kapusta_order_raw_maxi.csv", stringsAsFactors = F)
silva <- read.csv("kapusta_order_raw_silva.csv", stringsAsFactors = F)
common_cols <- intersect(colnames(maxi), colnames(silva))
common_cols <- common_cols[common_cols != "y"]
y <- as.character(maxi[, "y"])
y[y == "healthy"] <- "Healthy"
y[y == "septic"] <- "Septic"
y[y == "ntc"] <- "NTC"
maxi <- maxi[, 2:ncol(maxi)]
maxi <- maxi[, common_cols]
maxi <- maxi / apply(maxi, 1, sum) * 100
maxi <- aggregate(maxi, by=list(y), mean)
silva <- silva[, 2:ncol(silva)]
silva <- silva[, common_cols]
silva <- silva / apply(silva, 1, sum) * 100
silva <- aggregate(silva, by=list(y), mean)
require(ggplot2)
require(reshape2)
require(RColorBrewer)
pal <- brewer.pal(8, "Set2")
# Maxikraken db
melted_maxi <- melt(maxi)
# Get most abundant orders
means <- aggregate(melted_maxi$value, by=list(melted_maxi$variable), mean)
orders <- as.character(means$Group.1)[order(means$x, decreasing = T)][1:8]
melted_maxi <- melt(maxi[, colnames(maxi) %in% c("Group.1", orders)])
melted_silva <- melt(silva[, colnames(silva) %in% c("Group.1", orders)])
# Set factor sequence
melted_maxi$variable <- factor(melted_maxi$variable, levels = orders)
melted_silva$variable <- factor(melted_silva$variable, levels = orders)
plt1 <- ggplot(melted_maxi, aes(y = value, x=Group.1, fill=variable)) +
geom_bar(stat="identity") +
labs(fill = "Order", x = "MaxiKraken2", y = "Mean Relative Abundance (%)") +
scale_fill_manual(values = pal) +
theme(plot.margin = unit(c(1,1,1,1), "cm"))
plt2 <- ggplot(melted_silva, aes(y = value, x=Group.1, fill=variable)) +
geom_bar(stat="identity") +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,1,1,1), "cm")) +
labs(fill = "Order", x = "Silva") +
scale_fill_manual(values = pal)
# Plot no. of minimisers in database
silva <- read.csv("silva_290620_info.txt", sep = "\t", stringsAsFactors = F, header = F)
maxi <- read.csv("maxikraken2_info.txt", sep = "\t", stringsAsFactors = F, header = F)
# Trim whitespace
silva$V6 <- trimws(silva$V6)
maxi$V6 <- trimws(maxi$V6)
# Get orders
silva_df <- silva[silva$V6 %in% orders, c("V1", "V6")]
silva_df$Database <- "Silva"
maxi_df <- maxi[maxi$V6 %in% orders, c("V1", "V6")]
maxi_df$Database <- "MaxiKraken2"
plot_df <- rbind(silva_df, maxi_df)
plot_df$V6 <- factor(plot_df$V6, levels = orders)
plt3 <- ggplot(plot_df, aes(y = V1, x = Database, fill = V6)) +
geom_bar(stat="identity") +
labs(fill = "Order", x = "Database", y = "Proportion of minimisers (%)") +
scale_fill_manual(values = pal) +
theme(plot.margin = unit(c(1,1,1,1), "cm"))
require(ggpubr)
ggarrange(plt1, plt2, plt3,
ncol = 2, nrow = 2,
common.legend = T,
align = "hv",
labels = "auto")
ggsave("../results/silva_versus_maxi_barplot.png", dpi = 600, width = 8, height = 5)
rm(list = ls())
setwd("~/git_repos/Polymicrobial-Signature-of-Sepsis/datasets")
maxi <- read.csv("kapusta_order_raw_maxi.csv", stringsAsFactors = F)
silva <- read.csv("kapusta_order_raw_silva.csv", stringsAsFactors = F)
common_cols <- intersect(colnames(maxi), colnames(silva))
common_cols <- common_cols[common_cols != "y"]
y <- as.character(maxi[, "y"])
y[y == "healthy"] <- "Healthy"
y[y == "septic"] <- "Septic"
y[y == "ntc"] <- "NTC"
maxi <- maxi[, 2:ncol(maxi)]
maxi <- maxi[, common_cols]
maxi <- maxi / apply(maxi, 1, sum) * 100
maxi <- aggregate(maxi, by=list(y), mean)
silva <- silva[, 2:ncol(silva)]
silva <- silva[, common_cols]
silva <- silva / apply(silva, 1, sum) * 100
silva <- aggregate(silva, by=list(y), mean)
require(ggplot2)
require(reshape2)
require(RColorBrewer)
pal <- brewer.pal(8, "Set2")
# Maxikraken db
melted_maxi <- melt(maxi)
# Get most abundant orders
means <- aggregate(melted_maxi$value, by=list(melted_maxi$variable), mean)
orders <- as.character(means$Group.1)[order(means$x, decreasing = T)][1:8]
melted_maxi <- melt(maxi[, colnames(maxi) %in% c("Group.1", orders)])
melted_silva <- melt(silva[, colnames(silva) %in% c("Group.1", orders)])
# Set factor sequence
melted_maxi$variable <- factor(melted_maxi$variable, levels = orders)
melted_silva$variable <- factor(melted_silva$variable, levels = orders)
plt1 <- ggplot(melted_maxi, aes(y = value, x=Group.1, fill=variable)) +
geom_bar(stat="identity") +
labs(fill = "Order", x = "MaxiKraken2", y = "Mean Relative Abundance (%)") +
scale_fill_manual(values = pal) +
theme(plot.margin = unit(c(0,0,0,1), "cm"))
plt2 <- ggplot(melted_silva, aes(y = value, x=Group.1, fill=variable)) +
geom_bar(stat="identity") +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(0,0,0,1), "cm")) +
labs(fill = "Order", x = "Silva") +
scale_fill_manual(values = pal)
# Plot no. of minimisers in database
silva <- read.csv("silva_290620_info.txt", sep = "\t", stringsAsFactors = F, header = F)
maxi <- read.csv("maxikraken2_info.txt", sep = "\t", stringsAsFactors = F, header = F)
# Trim whitespace
silva$V6 <- trimws(silva$V6)
maxi$V6 <- trimws(maxi$V6)
# Get orders
silva_df <- silva[silva$V6 %in% orders, c("V1", "V6")]
silva_df$Database <- "Silva"
maxi_df <- maxi[maxi$V6 %in% orders, c("V1", "V6")]
maxi_df$Database <- "MaxiKraken2"
plot_df <- rbind(silva_df, maxi_df)
plot_df$V6 <- factor(plot_df$V6, levels = orders)
plt3 <- ggplot(plot_df, aes(y = V1, x = Database, fill = V6)) +
geom_bar(stat="identity") +
labs(fill = "Order", x = "Database", y = "Proportion of minimisers (%)") +
scale_fill_manual(values = pal) +
theme(plot.margin = unit(c(0,0,0,1), "cm"))
require(ggpubr)
ggarrange(plt1, plt2, plt3,
ncol = 2, nrow = 2,
common.legend = T,
align = "hv",
labels = "auto")
ggsave("../results/silva_versus_maxi_barplot.png", dpi = 600, width = 8, height = 5)
order
orders
maxi_df
maxi_df$V6
melted_maxi
melted_maxi$variable
melted_silva$variable
plot_df
plot_df$V6
